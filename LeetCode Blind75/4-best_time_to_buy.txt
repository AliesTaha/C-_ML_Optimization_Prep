int maxProfit(int* prices, int pricesSize) {
    if (pricesSize<1) return 0;
    int begin = prices[0];
    int prev_max= 0;
    for (int i=1; i<pricesSize; i++){
        if (prices[i]<begin) begin=prices[i];
        else prev_max = (prev_max < (prices[i]-begin) ? (prices[i]-begin) : prev_max);
    }
    return prev_max;       
}


int maxProfit(int* prices, int pricesSize) {
    if (pricesSize <= 1) return 0;
    int begin = prices[0];
    int prev_max = 0;
    for (int i = 1; i < pricesSize; i++) {
        if (prices[i] < begin) begin = prices[i];
        else prev_max = (prev_max > (prices[i] - begin)) ? prev_max : (prices[i] - begin);
    }
    return prev_max;
}



class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size()<=1) return 0;
        int begin = prices[0];
        int prev_max=0;
        for (int i =1; i< prices.size(); i++){
            if (prices[i]<begin) begin=prices[i];
            else prev_max= std::max(prev_max, prices[i]-begin);
        }
        return prev_max;
    }
};

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices)<=1:
            return 0
            
        min_price=prices[0]
        max_profit=0

        for price in prices[1:]:
            profit=price - min_price
            max_profit=max(max_profit, profit)
            min_price=min(min_price, price)
        return max_profit	